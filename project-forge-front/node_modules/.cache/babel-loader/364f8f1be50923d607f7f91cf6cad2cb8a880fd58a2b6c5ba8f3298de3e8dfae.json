{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  // retreive roles data from api \n  getRoles({\n    commit\n  }) {\n    axios.get(\"roles\").then(response => {\n      // store data in roles state\n      commit('setRole', response.data);\n    }).catch(error => {\n      if (error.response && error.response.status === 422) {\n        // Validation error\n        console.log('yes');\n        commit('setErrors', error.response.data.errors);\n      } else {\n        console.error(\"Error fetching roles:\", error);\n      }\n    });\n  },\n  // retreive specific role data from api \n  showRole({\n    commit\n  }, payload) {\n    console.log(payload);\n    axios.get(`roles/${payload}`, payload).then(response => {\n      // store data in role state\n      console.log(response.data);\n      commit('setOneRole', response.data);\n    }).catch(error => {\n      console.error(\"Error fetching role:\", error);\n    });\n  },\n  // store role in db\n  storeRole({\n    commit\n  }, payload) {\n    axios.post(\"roles\", payload).then(response => {\n      console.log(response.data);\n    }).catch(error => {\n      if (error.response.status === 422) {\n        // Validation error\n        commit('setErrors', error.response.data.errors);\n      } else {\n        console.error(\"Error storing role:\", error);\n      }\n    });\n  },\n  // update a role\n  updateRole({\n    commit\n  }, payload) {\n    axios.put(`roles/${payload.id}`, payload).then(response => {\n      console.log(\"role updated successfully:\", response.data);\n    }).catch(error => {\n      if (error.response.status === 422) {\n        // Validation error\n        commit('setErrors', error.response.data.errors);\n      } else {\n        console.error(\"Error updating role:\", error);\n      }\n    });\n  },\n  // delete role from db\n  deleteRole({\n    commit\n  }, payload) {\n    axios.delete(\"roles/\" + payload.id).then(response => {\n      console.log(\"role deleted successfully:\", response.data);\n    }).catch(error => {\n      console.error(\"Error deleting role:\", error);\n    });\n  }\n};","map":{"version":3,"names":["axios","getRoles","commit","get","then","response","data","catch","error","status","console","log","errors","showRole","payload","storeRole","post","updateRole","put","id","deleteRole","delete"],"sources":["D:/PROJETS/LARAVEL/project-forge-front/src/store/role/actions.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // retreive roles data from api \r\n  getRoles({commit}) {\r\n    axios\r\n        .get(\"roles\")\r\n        .then((response) => {\r\n            // store data in roles state\r\n            commit('setRole', response.data)\r\n        })\r\n        .catch((error) => {\r\n            if (error.response && error.response.status === 422) { // Validation error\r\n                console.log('yes')\r\n                commit('setErrors', error.response.data.errors);\r\n            } else {\r\n                console.error(\"Error fetching roles:\", error);\r\n            }\r\n        });\r\n    },// retreive specific role data from api \r\n    showRole({commit}, payload) {\r\n        console.log(payload)\r\n      axios\r\n          .get(`roles/${payload}`, payload)\r\n          .then((response) => {\r\n              // store data in role state\r\n              console.log(response.data)\r\n              commit('setOneRole', response.data)\r\n          })\r\n          .catch((error) => {\r\n                console.error(\"Error fetching role:\", error);\r\n          });\r\n      },\r\n    // store role in db\r\n    storeRole({commit}, payload) {\r\n        axios\r\n            .post(\"roles\", payload)\r\n            .then((response) => {\r\n                console.log(response.data);\r\n            }).catch((error) => {\r\n                if (error.response.status === 422) { // Validation error\r\n                    commit('setErrors', error.response.data.errors);\r\n                } else {\r\n                    console.error(\"Error storing role:\", error);\r\n                }\r\n            });\r\n    },\r\n    // update a role\r\n    updateRole({commit}, payload) {\r\n        axios.put(`roles/${payload.id}`, payload)\r\n            .then((response) => {\r\n                console.log(\r\n                    \"role updated successfully:\",\r\n                    response.data\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 422) { // Validation error\r\n                    commit('setErrors', error.response.data.errors);\r\n                } else {\r\n                    console.error(\"Error updating role:\", error);\r\n                }\r\n            });\r\n    },\r\n    // delete role from db\r\n    deleteRole({commit}, payload) {\r\n        axios\r\n            .delete(\"roles/\" + payload.id)\r\n            .then((response) => {\r\n                console.log(\r\n                    \"role deleted successfully:\",\r\n                    response.data\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error deleting role:\", error);\r\n            });\r\n\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}